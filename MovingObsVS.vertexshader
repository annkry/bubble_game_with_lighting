#version 330
#extension GL_ARB_explicit_uniform_location : require
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 translat;
layout(location = 2) in vec3 color;
layout(location = 3) in vec3 vertexNormal_modelspace;
layout(location = 4) in vec2 angles;
layout(location = 5) in vec3 axis;
layout(location = 6) uniform float alpha;
layout(location = 9) uniform mat4 VP;
layout(location = 7) uniform mat4 V;
layout(location = 8) uniform mat4 P;
layout(location = 10) uniform vec3 Cameraposition_worldspace;
layout(location = 13) uniform vec3 lightTable[20];
layout(location = 34) uniform vec3 lightObs[10];
layout(location = 11) uniform float mode;
layout(location = 46) uniform float pawnView;
layout(location = 47) uniform vec3 pawnPosition;

out vec4 fragmentColor;

out vec3 Nf;
out vec3 Lf;
out vec3 LfPawn;
out vec3 Vf;
out float distance;
out float distancePawn;
out float distanceFromCamera;
out vec3 pos;
out float blink;
out float ifPawnView;

out vec3[10] Ltable;
out float[10] distanceTable;
out float lightMode;

out vec3[5] LObsTable;
out float[5] distanceObsTable;
out vec3[5] Obscolor;



void main(){	

	vec3 dir =  vec3(vertexPosition_modelspace.x, vertexPosition_modelspace.y, vertexPosition_modelspace.z);

	float currRadius = sqrt(vertexPosition_modelspace.x * vertexPosition_modelspace.x + vertexPosition_modelspace.y * vertexPosition_modelspace.y + vertexPosition_modelspace.z * vertexPosition_modelspace.z);
	ifPawnView = pawnView;

	dir = vec3(translat.w  * dir.x / currRadius, translat.w  * dir.y / currRadius, translat.w * dir.z/ currRadius);
	dir = vec3(cos(angles.x) * dir.x + sin(angles.x) * dir.z, dir.y, -sin(angles.x) * dir.x + cos(angles.x) * dir.z);
	float c = cos(angles.y);
	float s = sin(angles.y);
	float x = axis.x;
	float y = axis.y;
	float z = axis.z;
	vec3 first = vec3(x*x*(1-c)+c, x*y*(1-c)-z*s, x*z*(1-c)+y*s);
	vec3 second = vec3(y*x*(1-c)+z*s, y*y*(1-c)+c, y*z*(1-c)-x*s);
	vec3 third = vec3(z*x*(1-c)-y*s, z*y*(1-c)+x*s, z*z*(1-c)+c);
	mat3 rotatMatrix = mat3(first, second, third);

	dir = dir * rotatMatrix;

	gl_Position = VP * vec4(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z, 1.0);
	pos = gl_Position.xyz;

	fragmentColor = vec4(color, alpha);

	blink = 0.0;
	int j = 0;
	for(int i = 0; i < 10; i += 2){
		if(lightObs[i].x == translat.x && lightObs[i].y == translat.y && lightObs[i].z == translat.z){
			blink = 1.0;
			
		}
		Obscolor[j] = lightObs[i + 1];
		j+=1;
	}

	distance = length(vec3(0.5, 5.0, 1.0) - vec3(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z));

	distancePawn = length(pawnPosition - vec3(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z));
	distanceFromCamera= length(Cameraposition_worldspace - vec3(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z));

	vec4 P = V * vec4(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z, 1.0);
	Nf = vec3(cos(angles.x) * vertexNormal_modelspace.x + sin(angles.x) * vertexNormal_modelspace.z, vertexNormal_modelspace.y, -sin(angles.x) * vertexNormal_modelspace.x + cos(angles.x) * vertexNormal_modelspace.z);
	Nf = (V * vec4(Nf * rotatMatrix, 0.0)).xyz;
 
 	Lf = (V * vec4(0.5, 5.0, 1.0, 1.0)).xyz - P.xyz;
	LfPawn = (V * vec4(pawnPosition, 1.0)).xyz - P.xyz;

 	Vf = vec3(0.0, 0.0, 0.0) - P.xyz;

	for(int i = 0; i < 10; i++){
		Ltable[i] = (V * vec4(lightTable[i], 1.0)).xyz - P.xyz;
		distanceTable[i] = length(lightTable[i] - vec3(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z));
	}

	lightMode = mode;

	int idx = 0;
	for(int i = 0; i < 10; i+=2){
		LObsTable[idx] = (V * vec4(lightObs[i], 1.0)).xyz - P.xyz;
		distanceObsTable[idx] = length(lightObs[i] - vec3(translat.x + dir.x, translat.y + dir.y, translat.z + dir.z));
		idx += 1;
	}
}
